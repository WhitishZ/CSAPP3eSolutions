#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	xorq %rax, %rax			# count = 0
	iaddq $-6, %rdx			# len >= 6?
	jl copy_rest
loop:
	mrmovq (%rdi), %r8		# src[0]
	mrmovq 8(%rdi), %r9		# src[1]
	rmmovq %r8, (%rsi)		# dst[0] = src[0]
	andq %r8, %r8			# src[0] > 0?
	jle copy_off1
	iaddq $1, %rax
copy_off1:
	rmmovq %r9, 8(%rsi)		# dst[1] = src[1]
	andq %r9, %r9			# src[1] > 0?
	jle copy_off2
	iaddq $1, %rax
copy_off2:
	mrmovq 16(%rdi), %r8	# src[2]
	mrmovq 24(%rdi), %r9	# src[3]
	rmmovq %r8, 16(%rsi)	# dst[2] = src[2]
	andq %r8, %r8			# src[2] > 0?
	jle copy_off3
	iaddq $1, %rax
copy_off3:
	rmmovq %r9, 24(%rsi)	# dst[3] = src[3]
	andq %r9, %r9			# src[3] > 0?
	jle copy_off4
	iaddq $1, %rax
copy_off4:
	mrmovq 32(%rdi), %r8	# src[4]
	mrmovq 40(%rdi), %r9	# src[5]
	rmmovq %r8, 32(%rsi)	# dst[4] = src[4]
	andq %r8, %r8			# src[4] > 0?
	jle copy_off5
	iaddq $1, %rax
copy_off5:
	rmmovq %r9, 40(%rsi)	# dst[5] = src[5]
	andq %r9, %r9			# src[5] > 0?
	jle copy_next_block
	iaddq $1, %rax
copy_next_block:
	iaddq $48, %rdi			# src = src + 6
	iaddq $48, %rsi			# dst = dst + 6
	iaddq $-6, %rdx			# len -= 6
	jge loop				# There are still at least 6 elements to copy.
copy_rest:
	# iaddq $6, %rdx			# Restore len variable(0-5).
	# iaddq $-1, %rdx			# len--
	iaddq $5, %rdx			# Equals to the 2 operations above.
	jl Done
	mrmovq (%rdi), %r8		# src[0]
	mrmovq 8(%rdi), %r9		# src[1]. Honestly, this operation is DANGEROUS!
	rmmovq %r8, (%rsi)		# dst[0] = src[0]
	andq %r8, %r8			# src[0] > 0?
	jle copy_rest_off1
	iaddq $1, %rax
copy_rest_off1:
	iaddq $-1, %rdx			# len--
	jl Done
	rmmovq %r9, 8(%rsi)		# dst[1] = src[1]
	andq %r9, %r9			# src[1] > 0?
	jle copy_rest_off2
	iaddq $1, %rax
copy_rest_off2:
	iaddq $-1, %rdx			# len--
	jl Done
	mrmovq 16(%rdi), %r8	# src[2]
	mrmovq 24(%rdi), %r9	# src[3]
	rmmovq %r8, 16(%rsi)	# dst[2] = src[2]
	andq %r8, %r8			# src[2] > 0?
	jle copy_rest_off3
	iaddq $1, %rax
copy_rest_off3:
	iaddq $-1, %rdx			# len--
	jl Done
	rmmovq %r9, 24(%rsi)	# dst[3] = src[3]
	andq %r9, %r9
	jle copy_rest_off4
	iaddq $1, %rax
copy_rest_off4:
	iaddq $-1, %rdx			# len--
	jl Done
	mrmovq 32(%rdi), %r8	# src[4]
	rmmovq %r8, 32(%rsi)	# dst[4] = src[4]
	andq %r8, %r8			# src[4] > 0?
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
